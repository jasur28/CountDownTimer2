@page "/counter"
@using CountDownTimer2.Data
@inject TimerService timerService
<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<input type="text" @bind="@CurrentValue" />

<p><button @onclick="@(async ()=>{Timer();})">Start</button></p>
<p><button @onclick="@(()=>{is_running=false;})">Pause</button></p>
<p><button @onclick="@(()=>{Timer();})">Resume</button></p>

<p>@NewValue</p>
<p>@displaytext</p>
<p>@TimerStarted</p>
<p>@TimerFinished</p>

@if (item is null)
{
    <p><em>No data!</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>id</th>
                <th>Timer Started</th>
                <th>Timer Finished</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach (var t in item)
            {
                <tr>
                    <td>@t.Id</td>
                    <td>@t.TimerStarted</td>
                    <td>@t.TimerFinished</td>
                </tr>
            }
        </tbody>
    </table>
}


@code{

    public bool is_running = false;
    private DateTime TimerStarted;
    private DateTime TimerFinished;
    private int CurrentValue { get; set; } = 0;
    private int NewValue { get; set; } = 0;

    string displaytext = "";

    List<TimerEntity> item;
    protected override async Task OnInitializedAsync()
    {
        item = await Task.Run(() => timerService.GetAllTimerEntitiesAsync());
    }


    async Task Timer()
    {
        TimerStarted = DateTime.Now;
        NewValue = CurrentValue;
        is_running = true;
        while (is_running)
        {
            await Task.Delay(1000);
            if (is_running)
            {
                NewValue -= 1;
                CurrentValue = NewValue;
                if(NewValue==0)
                {
                    is_running = false;
                    await AfterTime();
                }
                StateHasChanged();
            }
        }
    }

    Task AfterTime()
    {
        TimerFinished = DateTime.Now;
        displaytext = "time expired";
        TimerEntity item = new TimerEntity();
        item.TimerStarted = TimerStarted;
        item.TimerFinished = TimerFinished;
        timerService.InsertTimer(item);
        return Task.CompletedTask;
    }
}